# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again.

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:

- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## UI Improvements

- When designing time pickers, ensure they have sufficient spacing and clear visual hierarchy
- Use custom select elements instead of native time inputs for better control over styling and spacing
- For priority selectors, use color-coded buttons with clear visual feedback for the selected state
- Provide adequate spacing between UI elements to improve readability and usability
- Consider browser compatibility (especially Safari) when designing UI components
- Use larger input sizes (width and height) for better touch targets and readability
- Increase horizontal spacing between time picker elements to prevent cramping in Safari
- Use consistent padding and spacing across all form elements
- Ensure text is properly sized and spaced for readability across browsers
- Use shadcn/ui components when available for consistent styling and better browser compatibility
- For time pickers, consider using a popover-based approach with visual selection rather than text inputs
- When implementing custom time pickers, ensure they work well across different browsers and screen sizes

## Performance Optimizations

- Always use proper dependency arrays in useEffect, useCallback, and useMemo hooks to prevent unnecessary re-renders
- Memoize expensive calculations and rendering operations with useMemo
- Break down large components into smaller, memoized components using React.memo
- Use useCallback for event handlers to avoid function recreation on every render
- Avoid setting state during render phase which can cause render loops
- Be careful with complex object manipulations that occur on each render
- Prevent body scroll manipulation that's not properly cleaned up when a component unmounts
- Avoid directly modifying DOM elements without proper cleanup (e.g. document.body.style)
- When handling lots of data in tables or lists, consider virtualization techniques
- Wrap frequently updated component trees with memo() to prevent unnecessary re-renders
- Memoize props passed to child components to avoid reference changes
- Use separate states for unrelated UI elements rather than combining them into a single object
- Batch state updates when possible to reduce render cycles
- Handle API calls efficiently with proper loading states and error boundaries
- Optimize modal components to avoid causing parent re-renders when internal state changes

# Scratchpad

## Current Task: Fix UI Freezing Issues

[X] Analyze the codebase for potential performance issues
[X] Add memoization to the TaskModal component
[X] Optimize the CalendarView component using memo and breaking it into smaller components
[X] Fix the main page component's event handlers using useCallback
[X] Optimize the NaturalLanguageModal component for better performance
[X] Fix linter errors in the NaturalLanguageModal component
[X] Document the performance optimizations in the .cursorrules file

Key issues found and fixed:

- Missing dependencies in useEffect hooks causing excessive re-renders
- Event handlers recreated on every render without useCallback
- Expensive calculations performed on every render without memoization
- Large nested components causing cascading re-renders
- Improper DOM manipulations in event handlers
- State updates during render causing potential infinite loops
- Overly complex component structures
- Inefficient state updates and management
# API Error Handling Lessons
- Always check if API responses are valid JSON before parsing
- Add specific error handling for OpenAI API calls
- Return valid JSON even when errors occur in API routes
- Provide fallback values when parsing fails
- Add detailed error messages with suggestions for users

# Scratchpad

## Current Task: Fix JSON Parsing Error in Natural Language Task Extraction
